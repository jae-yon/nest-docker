name: Deploy to Server

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [ 20.x ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm run test
    
    - name: Run e2e tests
      run: npm run test:e2e

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_IMAGE_NAME }}:latest .
        docker tag ${{ secrets.DOCKER_IMAGE_NAME }}:latest ${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        username: ${{ secrets.USERNAME }}
        host: ${{ secrets.HOST }}
        port: ${{ secrets.PORT }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }}
        script: |
          echo "🚀 배포 워크플로우 시작"

          if [ ! -d ${{ secrets.DEPLOY_PATH }} ]; then
            echo "📁 디렉토리 생성"
            mkdir -p ${{ secrets.DEPLOY_PATH }}
          fi

          echo "📁 디렉토리 이동"
          cd ${{ secrets.DEPLOY_PATH }}

          if [ ! -d ".git" ]; then
            echo "🔄 깃 저장소 클론중..."
            git clone https://github.com/jae-yon/nest-docker.git . || {
              echo "❌ 깃 저장소 클론 실패"
              exit 1
            }
          else
            echo "🔄 깃 저장소 업데이트중..."
            git pull origin main || {
              echo "❌ 깃 저장소 업데이트 실패"
              exit 1
            }
          fi

          echo "📊 깃 상태 확인:"
          git status

          echo "🐋 도커 이미지 빌드 및 배포 시작"

          # 기존 컨테이너 중지 및 제거
          docker compose down

          # 새로운 컨테이너 시작
          docker compose up -d --build

          sleep 10
          
          docker system prune -f

          echo "🔍 애플리케이션 헬스 체크"
          curl -f http://localhost:5000/health || exit 1

          echo "✅ 도커 컨테이너 상태 확인"
          docker compose ps

          echo "📊 디스크 사용량:"
          df -h

          echo "🐳 Docker 리소스 사용량:"
          docker system df